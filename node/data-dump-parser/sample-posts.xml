<?xml version="1.0" encoding="utf-8"?>
<posts>
  <row Id="1" PostTypeId="1" AcceptedAnswerId="13" CreationDate="2010-09-01T19:34:48.000" Score="100" ViewCount="15816" Body="&lt;p&gt;A coworker of mine believes that &lt;em&gt;any&lt;/em&gt; use of in-code comments (ie, not javadoc style method or class comments) is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Code_smell&quot;&gt;code smell&lt;/a&gt;.  What do you think?&lt;/p&gt;&#xA;" OwnerUserId="6" LastEditorUserId="226" LastEditDate="2011-11-25T22:32:41.300" LastActivityDate="2012-11-27T19:29:27.740" Title="&quot;Comments are a code smell&quot;" Tags="&lt;comments&gt;&lt;anti-patterns&gt;" AnswerCount="35" CommentCount="10" FavoriteCount="39" ClosedDate="2012-11-27T20:11:51.580" CommunityOwnedDate="2011-01-31T09:04:54.130" />
  <row Id="3" PostTypeId="2" ParentId="1" CreationDate="2010-09-01T19:36:50.053" Score="29" Body="&lt;p&gt;Ideally, code should be so well coded that it should be auto explicative. In the real world, we know that also very high quality code needs sometimes commenting.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What you should absolutely avoid is &quot;comment-code redundancy&quot; (comments that don't add anything to code):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;i++; // Increment i by 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then, if there's a good (and maintained/aligned) code design and documentation, commenting is even less useful.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But in some circumstances comments can be a good aid in code readability:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;while( foo )&#xA;{&#xA;     if( dummy )&#xA;     {&#xA;     }&#xA;     else // !dummy&#xA;     {&#xA;     }&#xA;} // end while( foo )&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Don't forget that you have to maintain and keep in sync also comments... outdated or wrong comments can be a terrible pain! And, as a general rule, commenting too much can be a symptom of bad programming.&lt;/p&gt;&#xA;" OwnerUserId="11" LastEditorUserId="11" LastEditDate="2010-09-01T20:41:14.273" LastActivityDate="2010-09-01T20:41:14.273" CommentCount="17" CommunityOwnedDate="2011-01-31T09:04:54.130" />
  <row Id="4" PostTypeId="1" AcceptedAnswerId="26" CreationDate="2010-09-01T19:37:39.957" Score="66" ViewCount="4357" Body="&lt;p&gt;When starting a project for a company that's not primarily a programming company, one of the expectations is that there's a finished product at the end free of all bugs and does everything needed right away. However, that's rarely the case. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;What are some ways to manage expectations and explain to non-programmers how software development differs from other types of product development?&lt;/p&gt;&#xA;" OwnerDisplayName="user8" LastEditorDisplayName="user8" LastEditDate="2010-09-01T19:45:26.117" LastActivityDate="2013-03-20T19:59:57.770" Title="Getting non-programmers to understand the development process" Tags="&lt;business&gt;&lt;project-management&gt;&lt;development-process&gt;" AnswerCount="12" CommentCount="2" FavoriteCount="26" />
  <row Id="7" PostTypeId="2" ParentId="1" CreationDate="2010-09-01T19:42:16.797" Score="10" Body="&lt;p&gt;I think the answer is the usual &quot;It depends&quot; one.  Commenting code just to comment code is a smell.  Commenting code because you're using an obscure algorithm that's an order of magnitude faster saves the maintenance programmer (usually me 6 months after I wrote it) half a day of poking through the code to determine what it's doing.&lt;/p&gt;&#xA;" OwnerUserId="21" LastActivityDate="2010-09-01T19:42:16.797" CommentCount="0" CommunityOwnedDate="2011-01-31T09:04:54.130" />
  <row Id="9" PostTypeId="1" CreationDate="2010-09-01T19:43:04.957" Score="39" ViewCount="4319" Body="&lt;p&gt;Sometimes, the things I have to do for my job are interesting and engaging.  Sometimes, they aren't.  Occasionally, they &lt;i&gt;really&lt;/i&gt; aren't.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Do you have any particular strategies or tricks for dealing with those dull stretches when your brain would rather be doing anything other than what you're supposed to be doing, particularly when the Internet and its boundless opportunities for interesting Slack beckon?&lt;/p&gt;&#xA;" OwnerUserId="17" LastEditorUserId="666" LastEditDate="2010-09-11T09:35:35.957" LastActivityDate="2011-01-04T21:22:43.957" Title="How do you stay focused at work?" Tags="&lt;productivity&gt;&lt;time-management&gt;" AnswerCount="24" CommentCount="1" FavoriteCount="18" ClosedDate="2012-11-13T19:09:35.853" CommunityOwnedDate="2011-01-04T21:22:43.957" />
  <row Id="12" PostTypeId="2" ParentId="4" CreationDate="2010-09-01T19:44:47.413" Score="13" Body="&lt;p&gt;IMO, I've found that the transparency offered by agile processes (e.g. Scrum, Crystal, etc.) goes a long ways towards showing how development works to the average stakeholder.&lt;/p&gt;&#xA;" OwnerUserId="21" LastActivityDate="2010-09-01T19:44:47.413" CommentCount="1" />
  <row Id="13" PostTypeId="2" ParentId="1" CreationDate="2010-09-01T19:45:33.183" Score="168" Body="&lt;p&gt;Only if the comment describes what the code is doing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If I wanted to know what was happening in a method or block, I would read the code. I would hope, anyway, that any developers working on a given project were at least familiar enough with the development language to read what is written and understand what it is doing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In some cases of extreme optimization, you might be using techniques that makes it difficult for someone to follow what your code is doing. In these cases, comments can and should be used to not only explain why you have such optimizations, but what the code is doing. A good rule of thumb would be to have someone else (or multiple other people) familiar with the implementation language and project look at your code - if they can't understand both the why and the how, then you should comment both the why and the how.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, what's not clear in the code is why you have done something. If you take an approach that might not be obvious to others, you should have a comment that explains why you made the decisions that you did. I would suspect that you might not even realize that a comment is needed until after something like a code review, where people want to know why you did X instead of Y - you can capture your answer in the code for everyone else who looks at it in the future.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The most important thing, though, is to change your comments when you change your code. If you change an algorithm, be sure to update the comments with why you went with algorithm X over Y. Stale comments are an even bigger code smell.&lt;/p&gt;&#xA;" OwnerUserId="4" LastEditorUserId="4" LastEditDate="2010-09-14T22:32:25.190" LastActivityDate="2010-09-14T22:32:25.190" CommentCount="25" CommunityOwnedDate="2011-01-31T09:04:54.130" />
  <row Id="16" PostTypeId="1" AcceptedAnswerId="3675" CreationDate="2010-09-01T19:46:45.303" Score="27" ViewCount="3345" Body="&lt;p&gt;I have read a few articles on Internet about programming language choice in the enterprise. Recently many dynamic typed languages have been popular, i.e. Ruby, Python, PHP and Erlang. But many enterprises still stay with static typed languages like C, C++, C# and Java.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And yes, one of the benefits of static typed languages is that programming errors are caught earlier, at compile time, rather than at run time. But there are also advantages with dynamic typed languages. (&lt;a href=&quot;http://en.wikipedia.org/wiki/Static_typing#Dynamic_typing&quot;&gt;more on Wikipedia&lt;/a&gt;)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The main reason why enterprises don't start to use languages like Erlang, Ruby and Python, seem to be the fact that they are dynamic typed. That also seem to be the main reason why people on StackOverflow decide against Erlang. See &lt;a href=&quot;http://stackoverflow.com/questions/2199368/why-did-you-decide-against-using-erlang&quot;&gt;Why did you decide &quot;against&quot; Erlang&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, there seem to be a strong criticism against dynamic typing in the enterprises, but I don't really get it why it is &lt;strong&gt;that&lt;/strong&gt; strong.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Really, why is there so much criticism against dynamic typing in the enterprises? Does it really affect the cost of projects that much, or what? But maybe I'm wrong.&lt;/p&gt;&#xA;" OwnerUserId="18" LastEditorUserId="29020" LastEditDate="2012-12-30T17:50:34.530" LastActivityDate="2013-02-20T15:50:49.290" Title="Do dynamic typed languages deserve all the criticism?" Tags="&lt;programming-languages&gt;&lt;dynamic-typing&gt;&lt;static-typing&gt;&lt;type-systems&gt;" AnswerCount="9" CommentCount="8" FavoriteCount="12" ClosedDate="2013-02-20T21:50:27.170" />
  <row Id="18" PostTypeId="1" AcceptedAnswerId="25" CreationDate="2010-09-01T19:47:11.323" Score="6" ViewCount="467" Body="&lt;p&gt;At first glance, I'd say a good programming team needs to understand the following matters:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The details of the core language / framework&lt;/li&gt;&#xA;&lt;li&gt;HTML, (asynchronous) javascript&lt;/li&gt;&#xA;&lt;li&gt;SQL / data model&lt;/li&gt;&#xA;&lt;li&gt;Usability / UI design&lt;/li&gt;&#xA;&lt;li&gt;Security&lt;/li&gt;&#xA;&lt;li&gt;Project management.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;If this team is not complete: what is needed?&lt;/p&gt;&#xA;" OwnerUserId="9" LastEditorUserId="666" LastEditDate="2010-09-12T12:46:38.027" LastActivityDate="2010-09-12T12:46:38.027" Title="Which (programming) specialities are needed in a good web development team?" Tags="&lt;team&gt;&lt;web-development&gt;" AnswerCount="4" CommentCount="0" FavoriteCount="3" ClosedDate="2013-08-02T14:29:15.503" />
 </posts>